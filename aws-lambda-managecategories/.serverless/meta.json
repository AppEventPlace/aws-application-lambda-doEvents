{
  "C:\\Users\\jessi\\LambdasEventos\\aws-application-lambda-doEvents\\aws-lambda-managecategories": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\jessi\\LambdasEventos\\aws-application-lambda-doEvents\\aws-lambda-managecategories",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "events",
      "service": "aws-lambda-managecategories",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:519010577666:table/EventosCategorias"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "GetCategoryByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-managecategories-dev-getCategoryById"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-managecategories-dev-createUser"
              }
            },
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-lambda-managecategories-dev-getUser"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "aws-lambda-managecategories",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-managecategories-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-managecategories-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": "arn:aws:dynamodb:us-east-1:519010577666:table/EventosCategorias"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "aws-lambda-managecategories",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetCategoryByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/aws-lambda-managecategories/dev/1730756260548-2024-11-04T21:37:40.548Z/aws-lambda-managecategories.zip"
                },
                "Handler": "src/getCategory.getCategoryById",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-managecategories-dev-getCategoryById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCategoryByIdLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/aws-lambda-managecategories/dev/1730756260548-2024-11-04T21:37:40.548Z/aws-lambda-managecategories.zip"
                },
                "Handler": "src/createCategory.createCategory",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-managecategories-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/aws-lambda-managecategories/dev/1730756260548-2024-11-04T21:37:40.548Z/aws-lambda-managecategories.zip"
                },
                "Handler": "src/updateCategory.updateCategory",
                "Runtime": "nodejs20.x",
                "FunctionName": "aws-lambda-managecategories-dev-getUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "GetCategoryByIdLambdaVersion2iHyT7O2UwsFiEUOxnFL75ABMGuV9Tn5MRmfhurbgs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCategoryByIdLambdaFunction"
                },
                "CodeSha256": "r/nHqIgxP+RZGozrt2K0wtYEiBX7vVbv7djGsl2IaMc="
              }
            },
            "CreateUserLambdaVersionSHjVB8MdYffHbUgeI2qrzELuQqLIeWi6Pg09xXLnvEs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "r/nHqIgxP+RZGozrt2K0wtYEiBX7vVbv7djGsl2IaMc="
              }
            },
            "GetUserLambdaVersionsj6NETSh2Kyz6eFjF2HQkw6W9Daoravjao6YrrhXD8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "r/nHqIgxP+RZGozrt2K0wtYEiBX7vVbv7djGsl2IaMc="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-aws-lambda-managecategories",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetCategoryByIdLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCategoryByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetCategoryById": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetCategoryByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCategories": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /Categories",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetCategoryById"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetCategoryById"
            },
            "CreateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCreatecategory": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /createCategory",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateUser"
            },
            "GetUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUpdatecategory": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /updateCategory",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUser"
            },
            "TaskTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "EventosCategorias",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "Required": "No",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetCategoryByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCategoryByIdLambdaVersion2iHyT7O2UwsFiEUOxnFL75ABMGuV9Tn5MRmfhurbgs"
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-GetCategoryByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionSHjVB8MdYffHbUgeI2qrzELuQqLIeWi6Pg09xXLnvEs"
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersionsj6NETSh2Kyz6eFjF2HQkw6W9Daoravjao6YrrhXD8"
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-aws-lambda-managecategories-dev-HttpApiUrl"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getCategoryById": {
          "handler": "src/getCategory.getCategoryById",
          "events": [
            {
              "httpApi": {
                "path": "/Categories",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/Categories"
            }
          ],
          "name": "aws-lambda-managecategories-dev-getCategoryById",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCategoryByIdLambdaVersion2iHyT7O2UwsFiEUOxnFL75ABMGuV9Tn5MRmfhurbgs"
        },
        "createUser": {
          "handler": "src/createCategory.createCategory",
          "events": [
            {
              "httpApi": {
                "path": "/createCategory",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/createCategory"
            }
          ],
          "name": "aws-lambda-managecategories-dev-createUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionSHjVB8MdYffHbUgeI2qrzELuQqLIeWi6Pg09xXLnvEs"
        },
        "getUser": {
          "handler": "src/updateCategory.updateCategory",
          "events": [
            {
              "httpApi": {
                "path": "/updateCategory",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/updateCategory"
            }
          ],
          "name": "aws-lambda-managecategories-dev-getUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersionsj6NETSh2Kyz6eFjF2HQkw6W9Daoravjao6YrrhXD8"
        }
      },
      "resources": {
        "Resources": {
          "TaskTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "EventosCategorias",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "Required": "No",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: events\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: aws-lambda-managecategories\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-east-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n        - arn:aws:dynamodb:us-east-1:519010577666:table/EventosCategorias\r\nfunctions:\r\n  getCategoryById:\r\n    handler: src/getCategory.getCategoryById\r\n    events:\r\n      - httpApi:\r\n          path: /Categories\r\n          method: get\r\n  createUser:\r\n    handler: src/createCategory.createCategory\r\n    events:\r\n      - httpApi:\r\n          path: /createCategory\r\n          method: post\r\n  getUser:\r\n    handler: src/updateCategory.updateCategory\r\n    events:\r\n      - httpApi:\r\n          path: /updateCategory\r\n          method: put\r\nresources:\r\n  Resources:\r\n    TaskTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: EventosCategorias\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            Required: No\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": {
      "message": "An error occurred: TaskTable - Properties validation failed for resource TaskTable with message:\n[#/AttributeDefinitions/0: extraneous key [Required] is not permitted].",
      "stack": "ServerlessError2: An error occurred: TaskTable - Properties validation failed for resource TaskTable with message:\n[#/AttributeDefinitions/0: extraneous key [Required] is not permitted].\n    at file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:755:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.update (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:755:25462)\n    at async aws:deploy:deploy:updateStack (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:766:6071)\n    at async PluginManager.runHooks (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:9311)\n    at async PluginManager.invoke (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:10082)\n    at async PluginManager.spawn (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:10443)\n    at async PluginManager.runHooks (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:9311)\n    at async PluginManager.invoke (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:10082)\n    at async PluginManager.run (file:///C:/Users/jessi/.serverless/releases/4.4.7/package/dist/sf-core.js:953:10813)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_VALIDATION_ERROR"
    },
    "params": {},
    "machineId": "6a05a9b686d6f6ddc900c85c043a0726",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "a49a5b4e-88d5-4735-b53b-9d9537a436df",
    "orgName": "events",
    "userId": "BD6F4S9DdfT0Xb80Lm",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "events",
    "subscription": null,
    "userEmail": "visbalgomez@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "519010577666",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "aws-lambda-managecategories-dev",
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:519010577666:stack/aws-lambda-managecategories-dev/f6fb03f0-3fde-11ef-8b46-0affdc774a8b",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:519010577666:stack/aws-lambda-managecategories-dev/f6fb03f0-3fde-11ef-8b46-0affdc774a8b",
    "serviceProviderAwsCfStackCreated": "2024-07-11T23:40:33.124Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-04T21:37:58.013Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetCategoryByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:519010577666:function:aws-lambda-managecategories-dev-getCategoryById:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-managecategories-dev-GetCategoryByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:519010577666:function:aws-lambda-managecategories-dev-createUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-managecategories-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:519010577666:function:aws-lambda-managecategories-dev-getUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-lambda-managecategories-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "981nxjm6zh",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-aws-lambda-managecategories-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "aws-lambda-managecategori-serverlessdeploymentbuck-9dqdubyemjy4",
        "ExportName": "sls-aws-lambda-managecategories-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://981nxjm6zh.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-aws-lambda-managecategories-dev-HttpApiUrl"
      }
    ]
  }
}